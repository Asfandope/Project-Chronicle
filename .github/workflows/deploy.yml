name: Deploy to AWS

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  AWS_REGION: eu-north-1
  AWS_ACCOUNT_ID: 860256742576

jobs:
  # Trigger AWS CodeBuild projects
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    strategy:
      matrix:
        service: [orchestrator, model-service, evaluation]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Start CodeBuild project
        id: codebuild
        run: |
          BUILD_ID=$(aws codebuild start-build \
            --project-name magazine-extractor-${{ matrix.service }}-build \
            --source-version ${{ github.sha }} \
            --query 'build.id' --output text)
          echo "build-id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "Started CodeBuild for ${{ matrix.service }}: $BUILD_ID"
      
      - name: Wait for CodeBuild completion
        run: |
          echo "Waiting for CodeBuild ${{ steps.codebuild.outputs.build-id }} to complete..."
          aws codebuild batch-get-builds --ids ${{ steps.codebuild.outputs.build-id }} \
            --query 'builds[0].buildStatus' --output text
          
          # Poll until build completes
          while true; do
            STATUS=$(aws codebuild batch-get-builds --ids ${{ steps.codebuild.outputs.build-id }} \
              --query 'builds[0].buildStatus' --output text)
            echo "Build status: $STATUS"
            
            if [ "$STATUS" = "SUCCEEDED" ]; then
              echo "✅ Build succeeded for ${{ matrix.service }}"
              break
            elif [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "FAULT" ] || [ "$STATUS" = "STOPPED" ] || [ "$STATUS" = "TIMED_OUT" ]; then
              echo "❌ Build failed for ${{ matrix.service }}: $STATUS"
              exit 1
            fi
            
            sleep 30
          done

  # Deploy to staging environment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
          # This could involve:
          # - Updating Kubernetes manifests
          # - Running helm upgrade
          # - Updating docker-compose files on staging servers
          # - Running database migrations
          
      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test commands here

  # Deploy to production environment
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add actual production deployment commands here
          
      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # Add health check commands here
      
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  # Notify deployment status
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "Staging deployment successful"
          fi
          
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "Production deployment successful" 
          fi
          
          # Add actual notification logic here (Slack, email, etc.)
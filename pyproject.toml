[tool.poetry]
name = "magazine-pdf-extractor"
version = "0.1.0"
description = "Automated Magazine/Newspaper PDF extraction system with dual-pass architecture and self-healing capabilities"
authors = ["Your Team <team@company.com>"]
readme = "README.md"
packages = [
    {include = "orchestrator", from = "services"},
    {include = "model_service", from = "services"},
    {include = "evaluation", from = "services"},
    {include = "shared", from = "."}
]

# Core dependencies - required for all deployments
[tool.poetry.dependencies]
python = "^3.11"

# Web framework and API (Apache 2.0)
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}

# Data validation and serialization (MIT)
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"

# Database and ORM (MIT/PostgreSQL License)
sqlalchemy = "^2.0.23"
alembic = "^1.13.0"
psycopg2-binary = "^2.9.9"  # PostgreSQL adapter as specified in PRD

# Task queue and caching (BSD)
redis = "^5.0.1"
celery = "^5.3.4"

# PDF manipulation (MIT License) - as specified in PRD section 8.3
PyPDF2 = "^3.0.1"
pdfplumber = "^0.10.3"
PyMuPDF = "^1.23.8"  # fitz - for shared PDF utilities

# OCR - Tesseract 5.0+ Python bindings (Apache 2.0) - as specified in PRD section 8.3
pytesseract = "^0.3.10"

# Transformers/LayoutLM for layout understanding (Apache 2.0) - as specified in PRD section 8.3
transformers = "^4.36.2"

# NetworkX for graph algorithms (BSD) - as specified in PRD section 8.3
networkx = "^3.2.1"

# Core ML and image processing (BSD/MIT)
torch = "^2.1.2"
numpy = "^1.26.2"
Pillow = "^10.1.0"

# Computer vision and image processing for OCR
opencv-python = "^4.8.1"
scikit-image = "^0.22.0"

# Text processing and WER calculation
jiwer = "^3.0.3"

# Data processing and analysis (BSD)
pandas = "^2.1.4"
scikit-learn = "^1.3.2"

# Configuration and utilities (MIT/BSD)
pyyaml = "^6.0.1"
click = "^8.1.7"
structlog = "^23.2.0"
tenacity = "^8.2.3"

# HTTP clients (MIT/BSD)
requests = "^2.31.0"
httpx = "^0.25.2"

# XML processing (BSD)
lxml = "^4.9.3"
xmlschema = "^2.5.1"

# Monitoring (Apache 2.0)
prometheus-client = "^0.19.0"

# Visualization for graph analysis (BSD)
matplotlib = "^3.8.2"

# Development dependencies
[tool.poetry.group.dev.dependencies]
# Code formatting and linting
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"
pre-commit = "^3.6.0"

# Development tools
factory-boy = "^3.3.0"
httpx = "^0.25.2"

# Testing dependencies  
[tool.poetry.group.test.dependencies]
# Core testing framework - as specified in PRD
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-benchmark = "^4.0.0"

# Test utilities
factory-boy = "^3.3.0"
faker = "^20.1.0"

# GPU-only dependencies for accelerated inference
[tool.poetry.group.gpu.dependencies]
torch = "^2.1.2"
torchvision = "^0.16.2"

# Optional dependencies for advanced features
[tool.poetry.group.optional.dependencies]
# Computer vision (Apache 2.0)
opencv-python = "^4.8.1"

# NLP (MIT)
spacy = "^3.7.2"

# Additional ML tools
torchtext = "^0.16.2"

# Commenting out GPU-specific PyTorch source for M1 Mac compatibility
# [[tool.poetry.source]]
# name = "pytorch-gpu"
# url = "https://download.pytorch.org/whl/cu118"
# priority = "explicit"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=services --cov=shared --cov-report=term-missing --cov-report=html"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["services", "shared"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]